name: network-perf-debug
on:
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-east-1
      RESULTS_PREFIX: net-results/

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init (pre-clean)
        continue-on-error: true
        run: terraform init -input=false

      - name: Terraform destroy (pre-clean)
        continue-on-error: true
        run: terraform destroy -auto-approve -input=false

      - name: Terraform init & apply
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Read outputs
        id: tf
        run: |
          echo "server=$(terraform output -raw server_private_ip)" >> $GITHUB_OUTPUT
          echo "client=$(terraform output -raw client_public_ip)" >> $GITHUB_OUTPUT
          echo "client_name=$(terraform output -raw client_name_tag)" >> $GITHUB_OUTPUT
          echo "results_bucket=$(terraform output -raw results_bucket_name)" >> $GITHUB_OUTPUT

      # 🔍 Debug EC2 + SSM state
      - name: Debug EC2 + SSM state
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          SID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=network-test-server" --query "Reservations[].Instances[].InstanceId" --output text | head -n1)
          CID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ steps.tf.outputs.client_name }}" --query "Reservations[].Instances[].InstanceId" --output text | head -n1)
          echo "SID=$SID CID=$CID"
          echo "=== EC2 Describe (server) ==="
          aws ec2 describe-instances --instance-ids "$SID" --query "Reservations[0].Instances[0]" --output table || true
          echo "=== EC2 Describe (client) ==="
          aws ec2 describe-instances --instance-ids "$CID" --query "Reservations[0].Instances[0]" --output table || true
          echo "=== IAM Instance Profile Associations ==="
          aws ec2 describe-iam-instance-profile-associations \
            --filters "Name=instance-id,Values=$SID,$CID" \
            --output table || true
          echo "=== SSM Managed Instances (PingStatus) ==="
          aws ssm describe-instance-information \
            --query "InstanceInformationList[].{ID:InstanceId,Name:Name,Ping:PingStatus,Agent:AgentVersion,Platform:PlatformType,IP:IPAddress}" \
            --output table || true

      - name: Wait until SSM is online (server & client)
        id: ssmwait
        run: |
          SID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=network-test-server" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text | head -n1)
          CID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ steps.tf.outputs.client_name }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text | head -n1)
          echo "ServerId=$SID  ClientId=$CID"

          wait_ssm() {
            local IID="$1"
            echo "Waiting for SSM Managed: $IID"
            for i in {1..30}; do
              PING=$(aws ssm describe-instance-information \
                --query "InstanceInformationList[?InstanceId=='${IID}'].PingStatus" --output text)
              if [ "$PING" = "Online" ]; then
                echo "Instance $IID is Online in SSM"
                return 0
              fi
              sleep 5
            done
            echo "Timed out waiting for SSM Online: $IID"
            exit 1
          }

          wait_ssm "$SID"
          wait_ssm "$CID"

          echo "sid=$SID" >> $GITHUB_OUTPUT
          echo "cid=$CID" >> $GITHUB_OUTPUT

      - name: Restart & warm up SSM agents (server & client)
        run: |
          SID=${{ steps.ssmwait.outputs.sid }}
          CID=${{ steps.ssmwait.outputs.cid }}
          restart_agent() {
            local IID="$1"
            CMD_ID=$(aws ssm send-command \
              --instance-ids "$IID" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands":["sudo systemctl restart amazon-ssm-agent"]}' \
              --comment "Restart SSM agent for debugging" \
              --region ${{ env.AWS_REGION }} \
              --output json | jq -r '.Command.CommandId')
            aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "$IID" --region ${{ env.AWS_REGION }}
          }
          restart_agent "$SID"
          restart_agent "$CID"

      # 💤 COMMENTED OUT — long-running sections
      # - name: Upload scripts
      # - name: Prep server via SSM
      # - name: Check receiver agent log
      # - name: Run experiments via SSM (by tag)
      # - name: Download results
      # - name: Analyze results
      # - name: Upload artifacts

      # 🩺 Inspect SSM agent log on failure or manually
      - name: Inspect SSM Agent Log (Server)
        if: failure()
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids ${{ steps.ssmwait.outputs.sid }} \
            --document-name "AWS-RunShellScript" \
            --comment "Inspect SSM agent log" \
            --parameters '{"commands":["sudo tail -n 50 /var/log/amazon/ssm/amazon-ssm-agent.log || true"]}' \
            --region ${{ env.AWS_REGION }} \
            --output json | jq -r '.Command.CommandId')
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id ${{ steps.ssmwait.outputs.sid }} --region ${{ env.AWS_REGION }}
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id ${{ steps.ssmwait.outputs.sid }} \
            --region ${{ env.AWS_REGION }} \
            --query 'StandardOutputContent' \
            --output text

      - name: Inspect SSM Agent Log (Client)
        if: failure()
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids ${{ steps.ssmwait.outputs.cid }} \
            --document-name "AWS-RunShellScript" \
            --comment "Inspect SSM agent log" \
            --parameters '{"commands":["sudo tail -n 50 /var/log/amazon/ssm/amazon-ssm-agent.log || true"]}' \
            --region ${{ env.AWS_REGION }} \
            --output json | jq -r '.Command.CommandId')
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id ${{ steps.ssmwait.outputs.cid }} --region ${{ env.AWS_REGION }}
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id ${{ steps.ssmwait.outputs.cid }} \
            --region ${{ env.AWS_REGION }} \
            --query 'StandardOutputContent' \
            --output text

      - name: Terraform init (for destroy)
        if: always()
        run: terraform init -input=false

      - name: Terraform destroy (final)
        if: always()
        run: terraform destroy -auto-approve -input=false
